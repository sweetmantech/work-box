{"version":3,"sources":["/home/awolfsdorf/hack/aleph/blackbox/work-box/lib/plugins/agreement-factory/dist/chunk-ZKXSXQNE.js","../src/agreement-factory.plugin.ts"],"names":[],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACA;ACJA,sCAAuC;AAGvC;AACA,0BAAkB;AAEX,IAAM,8BAAA,EAAN,MAAA,QAA4C,wCAAA;AAAA,EAC/C,MAAA,CAAE,MAAA,CAAO;AAAA,IACL,YAAA,EAAc,MAAA,CAAE,GAAA,CAAI,CAAA,CAAE,QAAA,CAAS,4CAA4C,CAAA;AAAA,IAC3E,gBAAA,EAAkB,MAAA,CAAE,MAAA,CAAO,CAAA,CAAE,QAAA,CAAS,4DAA4D,CAAA,CAAE,OAAA,CAAQ,OAAO;AAAA,EACvH,CAAC;AACL,EAAE;AAAC,CAAA;AAMI,IAAM,uBAAA,YAAN,MAAA,QAAqC,iBAA4B;AAAA,EACpE,WAAA,CAAY,EAAE,gBAAgB,CAAA,EAAqC;AAC/D,IAAA,OAAA,CAAQ,GAAA,CAAI,iBAAA,EAAmB,eAAe,CAAA;AAC9C,IAAA,KAAA,CAAM,mBAAA,EAAqB,CAAC,IAAI,6CAAA,CAAwB,EAAE,gBAAgB,CAAC,CAAC,CAAC,qCAAA;AAAA,EACjF;AAAA,iBAEA,cAAA,EAAgB,CAAC,KAAA,EAAA,GAAiB,KAAA,CAAM,KAAA,IAAS,MAAA;AACrD,UAAA;AAEO,SAAS,gBAAA,CAAiB,EAAE,gBAAgB,CAAA,EAAqC;AACpF,EAAA,OAAO,IAAI,sBAAA,CAAuB,EAAE,gBAAgB,CAAC,CAAA;AACzD;ADHA;AACA;AACE;AACA;AACA;AACF,4KAAC","file":"/home/awolfsdorf/hack/aleph/blackbox/work-box/lib/plugins/agreement-factory/dist/chunk-ZKXSXQNE.js","sourcesContent":[null,"import { type Chain, PluginBase } from \"@goat-sdk/core\";\nimport type { EVMWalletClient } from \"@goat-sdk/wallet-evm\";\nimport { AgreementFactoryService } from \"./agreement-factory.service\";\nimport { createToolParameters } from \"@goat-sdk/core\";\nimport { z } from \"zod\";\n\nexport class DeployAgreementPairParameters extends createToolParameters(\n    z.object({\n        walletClient: z.any().describe(\"The EVMWalletClient to use for transaction\"),\n        minGasToComplete: z.string().describe(\"The minimum gas required for transactions in the paymaster\").default(\"10000\"),\n    }),\n) {} \n\nexport type AgreementFactoryPluginCtorParams = {\n    contractAddress: `0x${string}`;\n};\n\nexport class AgreementFactoryPlugin extends PluginBase<EVMWalletClient> {\n    constructor({ contractAddress }: AgreementFactoryPluginCtorParams) {\n        console.log(\"contractAddress\", contractAddress);\n        super(\"agreement-factory\", [new AgreementFactoryService({ contractAddress })]);\n    }\n\n    supportsChain = (chain: Chain) => chain.type === \"evm\";\n}\n\nexport function agreementFactory({ contractAddress }: AgreementFactoryPluginCtorParams) {\n    return new AgreementFactoryPlugin({ contractAddress });\n}\n"]}